// Utility functions
const debounce = (func, wait) => {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
};

// Search functionality
const initSearch = () => {
    const searchInput = document.getElementById("search-input");
    const searchResults = document.getElementById("search-results");

    if (searchInput && searchResults) {
        const handleSearch = async () => {
            const query = searchInput.value.trim();

            if (query.length < 2) {
                searchResults.innerHTML = "";
                return;
            }

            try {
                const response = await fetch(
                    `/cinetech/?page=search&query=${encodeURIComponent(query)}`
                );
                if (!response.ok) throw new Error("Erreur de recherche");
                
                const results = await response.json();
                searchResults.innerHTML = results
                    .slice(0, 10)
                    .map(result => `
                        <a href="?page=detail&type=${result.media_type}&id=${result.id}" class="search-result">
                            <img src="https://image.tmdb.org/t/p/w92${result.poster_path || ''}" 
                                 alt="${result.title || result.name}"
                                 loading="lazy"
                                 onerror="this.src='/cinetech/public/images/no-poster.jpg'">
                            <span>${result.title || result.name}</span>
                        </a>
                    `).join("");
            } catch (error) {
                console.error("Erreur:", error);
                searchResults.innerHTML = "<p>Erreur lors de la recherche.</p>";
            }
        };

        searchInput.addEventListener("input", debounce(handleSearch, 300));
    }
};

// Favorites functionality
const initFavorites = () => {
    const favButtons = document.querySelectorAll('.fav-button');
    
    favButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
            e.preventDefault();
            const mediaId = button.dataset.id;
            const mediaType = button.dataset.type;
            
            try {
                const response = await fetch('/cinetech/?page=toggle_favorite', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `media_id=${mediaId}&media_type=${mediaType}`
                });
                
                if (!response.ok) throw new Error('Erreur rÃ©seau');
                
                const data = await response.json();
                button.classList.toggle('active', data.is_favorite);
                button.querySelector('i').className = data.is_favorite ? 'fas fa-heart' : 'far fa-heart';
            } catch (error) {
                console.error('Erreur:', error);
            }
        });
    });
};

// Comments functionality
const initComments = () => {
    const commentForms = document.querySelectorAll('.comment-form');
    const replyButtons = document.querySelectorAll('.reply-button');
    
    commentForms.forEach(form => {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(form);
            
            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) throw new Error('Erreur envoi commentaire');
                
                const result = await response.json();
                if (result.success) {
                    location.reload();
                }
            } catch (error) {
                console.error('Erreur:', error);
            }
        });
    });

    replyButtons.forEach(button => {
        button.addEventListener('click', () => {
            const commentId = button.dataset.commentId;
            const replyForm = document.querySelector(`#reply-form-${commentId}`);
            if (replyForm) {
                replyForm.classList.toggle('hidden');
            }
        });
    });
};

// Textarea auto-resize
const initTextareaResize = () => {
    const textareas = document.querySelectorAll('textarea');
    
    textareas.forEach(textarea => {
        textarea.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });
    });
};

// Burger menu
const initBurgerMenu = () => {
    const burger = document.querySelector('.burger-menu');
    const navbar = document.querySelector('.navbar');
    const menuIcon = burger.querySelector('.fa-bars');
    const closeIcon = burger.querySelector('.fa-times');
    
    if (burger && navbar) {
        burger.addEventListener('click', () => {
            navbar.classList.toggle('active');
            menuIcon.style.display = navbar.classList.contains('active') ? 'none' : 'block';
            closeIcon.style.display = navbar.classList.contains('active') ? 'block' : 'none';
        });
    }
};

// Initialize all features
document.addEventListener('DOMContentLoaded', () => {
    initSearch();
    initFavorites();
    initComments();
    initTextareaResize();
    initBurgerMenu();
});
